26. promise

    Promise.all()：Promise 都成功时返回一个包含所有结果的数组，如果任何一个 Promise 失败，则立即返回失败的结果。
    Promise.race()： 第一个完成的结果
    Promise.any()： 第一个成功的结果
    Promise.allSettled()：返回一个包含每个 Promise 结果的对象数组
    // 输出:
    // [
    //   { status: 'fulfilled', value: 1 },
    //   { status: 'rejected', reason: 'Error' },
    //   { status: 'fulfilled', value: 3 }
    // ]

    finally()：无论 Promise 是成功还是失败，都会执行的回调函数。

    Promse.race  就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。
    Promse.any  resolve必须等到有一个成功的结果, reject所有的都失败才执行reject
    Promse.all   如果所有的Promise都正确执行了 , 否则只要有一个执行错误就reject 
    Promise.allSettled  Promise 全部处理完成后，我们可以拿到每个 Promise 的状态，而不管其是否处理成功


    1. race 快速失败机制, 多个服务同时执行，任一失败立即触发错误处理（如分布式系统探活）。
    2. any 从最快的服务器检索资源

　　3. 相比之下，Promise.all() 更适合彼此相互依赖或者在其中任何一个reject时立即结束。
    eg. 比如说一个页面上需要等两个或多个ajax的数据回来以后才正常显示，在此之前只显示loading图标

    4. Promise.allSettled() 当您有多个彼此不依赖的异步任务成功完成时，或者您总是想知道每个promise的结果时，通常使用它。
    eg. 同时填了3干个独立的表单，这三个表单分三个接口提交到后端，三个接口独立，没有顺序依赖，这个时候我们需要等到请求全部完成后给与用户提示表单提交的情况

27. 同一个页面引入多个版本jQuery实现共存
jQuery.noConflict()

$(function(){
    var $2 = $.noConflict(); // 第二个加载的jQuery对象变成了 $2
    var version = $.fn.jquery ;
    var version2 = $2.fn.jquery ;
    console.info(version , version2);
    document.write("jQuery版本是： " + version + "jQuery2版本是： " + version2);
});

28、websocket
    全双工（两个方向上同时传输）、二进制帧、协议名（ws、wss）、一次握手

    弹幕
    媒体聊天
    协同编辑
    基于位置的应用
    体育实况更新
    股票基金报价实时更新
    

29、
小程序特有的双线程设计。 H5 下我们所有资源通常都会打到一个 bundle.js 文件里（不考虑分包加载），
而小程序编译后的结果会有两个bundle，index.js封装的是小程序项目的 view 层，以及 index.worker.js 封装的是项目的业务逻辑，
在运行时，会有两条线程来分别处理这两个bundle，一个是主渲染线程，它负责加载并渲染 index.js 里的内容，
另外一个是 Service Worker线 程，它负责执行 index.worker.js 里封装的业务逻辑，这里面会有很多对底层api调用。

30、
jq 的链式调用通过以下机制实现：

​函数式 API 设计：
每个 jq 方法（如 map、filter、reduce）均返回一个新的 jq 对象，而非直接修改原始数据。
这种设计允许将多个操作串联起来，形成流水线式的处理流程。

jq 的链式调用本质上是 ​函数式编程 和 ​状态封装 的结合：
​函数返回新状态：每次操作生成新 jq 对象，保留原始数据不变。
​高阶函数：通过 map、filter 等方法将业务逻辑与数据操作解耦。
​错误隔离：通过 catch 方法控制异常传播，避免链式崩溃。
这种设计使得 jq 的代码简洁且易于维护，同时保证了高性能和灵活性。

31、
    

32、
    如何setTimeout 实现setInterval
    写一个loop函数，先定义空定时器，里面赋值定时器，定时器里面执行fn和loop，最后返回清除定时器

33、如何实现预览 PDF 文件
        1. 使用浏览器内置的 PDF 查看器

        <!-- 方法1: 使用超链接 -->
        <a href="/path/to/your/document.pdf" target="_blank">预览PDF</a>

        <!-- 方法2: 使用JavaScript -->
        <button onclick="window.open('/path/to/your/document.pdf', '_blank')">预览PDF</button>

        2. 使用 PDF.js
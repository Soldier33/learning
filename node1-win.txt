一、 单行文本自适应省略号
white-space: nowrap;  /* 禁止换行 */
text-overflow: ellipsis; /* 溢出显示... */
overflow: hidden;


二、国际化怎么做，中文一个字，阿拉伯语很长一串，怎么实现样式的一致
1. 布局弹性设计
    a. min-width、max-width
    b. Flexbox/Grid 自动分配空间
2. 文本溢出处理 (省略号)
3. 动态字体与间距 
    :root[lang="ar"] { /* 阿拉伯语 */
        --font-scale: 0.9; /* 长文本缩小字号 */
    }


三、 数组去重 （手写）
1. new Set(arr)
2. 
 let newArr = arr.filter((item, index) => {
     return arr.indexOf(item) === index
 })

四、 new（手写）
    var obj={};
    obj._proto_=F.prototype;
    F.call(obj);

五、深拷贝（手写）
var deepClone= (obj,map=new WeakMap()) =>{
  if(map.get(obj)){
	  return obj
  }

  let newObj;
  if(typeof obj==='object'&& obj!==null){
	  map.set(obj,true)
  	newObj=Array.isArray(obj)?[]:{};
  	for(let item in obj){
  		if(obj.hasOwnProperty(item)){
  			newObj[item]=deepClone(obj[item])
		}
	}
  	return newObj;
  }
  else {
  	return obj;
  }
};

六、 js文件中没有DOM操作，可以将JavaScript脚本设置为异步加载，用async或defer标记代码，
    都是用来异步加载脚本，不会阻塞页面渲染。defer顺序可控，（async脚本独立时用）

七、IE盒子，少了边框和padding的宽度
八、基础类型在栈中，引用类型在堆中
九、伪类：特定的状态 :hover,:active ；   
    伪元素：特定部分，双冒号 ::before

十、bfc:display:inline-block、flex

十一、http
1.x： 文本格式，序列和阻塞机制
2：   二进制数据帧， 帧属于哪个流有标识，多路复用，避免旧版的队头阻塞，同一个tcp可发多个请求
3：   udp， 采用quic协议，无队头阻塞的多路复用，丢包不阻塞

十二、前端内存泄漏：未清空的定时器、闭包、引用未被清除

十三、typeof 引用类型不行，   typeof XXX
      instanceof 基本数据类型不行  XXX instanceof Object

十四、改变原数组：pop, push, shift, unshift, sort, reverse, splice

十五、居中：https://blog.csdn.net/m0_73560798/article/details/139392124
    1. 
    display: flex;
    //水平居中
    justify-content: center;
    //垂直居中
    align-items: center;

    Ps: flex-direction: row;  //方向

    2.
    子绝父相。子向右下移动父元素的一半，再利用transform.
    top: 50%;left: 50%;  transform: translate(-50%,-50%);

    3. 绝对定位+margin 

    .container{
        position: relative;
        width: 500px;
        height: 500px;
        background-color: yellow;
    }
    .item{
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        margin: auto;
        width: 100px;
        height: 100px;
    }

十六、箭头函数不能用作 Generator 函数。

十七、隐藏元素
display: none;
visibility: hidden;
opacity: 0;


五
面试题库：https://fe.ecool.fun/topic-list?tagId=26
（手写promise.all,对象扁平化，eventloop时序考察，还有一道貌似是全排列，记不清了）
《JavaScript设计模式与开发实践》
《你不知道的js》上中下本
《代码整洁之道》
《重构:改善既有代码的设计》
《图解HTTP》、《图解TCP/IP》

十八、 //二分查找 （手写）
function binary(arr, val) {
    if (!arr.length) return -1;
    let low = 0, high = arr.length;
    while (low < high) {
        let mid = Math.floor((high + low) / 2);
        for (let i = 0; i < arr.length; i++) {
            if (arr[i] == val) {
                return i;
            }
            else if (arr[i] > val) {
                high = mid - 1；
            } else if (arr[i] < val) {
                low = mid + 1;
            }
        }
    }
}

// 复杂度是O(nlogn)

十九、/*
** position:relative 相对定位，相对自身定位
** position:absolute 绝对定位，相对于最近的不为static的父级元素定位
*/

二十、判断是否是圆内
function inCircle(cx,cy,x,y,r){
    return (cx-x)^2+(cy-y)^2<r^2
}


二十一、nginx的场景，图片防盗链怎么做，反向代理是什么，怎么做
图片防盗链实现：Referer字段实现。
反向代理（Reverse Proxy）
2.1 核心概念
反向代理充当客户端与后端服务器之间的中介：

功能：

隐藏真实服务器IP，提升安全性。

负载均衡，分散请求压力。

缓存静态内容，加速访问。

SSL终止，集中管理HTTPS证书

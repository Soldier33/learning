26. 垃圾回收机制
    标记清除：可以清除循环引用
    引用计数：缺点：循环引用无法清除，优点：立即清除

27. vue中 keep-alive底层是如何实现的？

    <keep-alive> 的主要功能是缓存不活动的组件实例，而不是销毁它们。当组件再次被激活时，直接从缓存中恢复，避免重新渲染和挂载。

    缓存机制:
    <keep-alive> 内部维护了一个缓存对象（cache），用于存储被缓存的组件实例。
    缓存对象的键是组件的 name 选项或组件的 tag，值是组件的 VNode（虚拟 DOM 节点）。

28. 预检请求：
预检请求是 CORS 机制的重要组成部分，用于确保跨域请求的安全性。
    通过合理配置服务器响应头，可以减少预检请求的频率，提升性能。
预检请求（Preflight Request） 的响应状态码通常是 200 OK。
这是因为预检请求的目的是确认服务器是否允许实际的跨域请求，而不是实际处理请求。
服务器通过返回 200 OK 状态码和相关的 CORS 头信息，告诉浏览器是否允许后续的实际请求。


预检请求失败	403/405 等	服务器不允许跨域请求，浏览器会阻止实际请求。

29. Promise
    Promise.all()：Promise 都成功时返回一个包含所有结果的数组，如果任何一个 Promise 失败，则立即返回失败的结果。
    Promise.race()： 第一个完成的结果
    Promise.any()： 第一个成功的结果
    Promise.allSettled()：返回一个包含每个 Promise 结果的对象数组
    // 输出:
    // [
    //   { status: 'fulfilled', value: 1 },
    //   { status: 'rejected', reason: 'Error' },
    //   { status: 'fulfilled', value: 3 }
    // ]


    finally()：无论 Promise 是成功还是失败，都会执行的回调函数。

30.建立TCP连接，三次握手;  确认双方的接收和发送能力
            客户端：你好，你听得到么。（客户端发送能力）
        服务器：你好，我听得到，你听得到么？（服务器：接收能力、响应能力）
        客户端：我也听得到。（客户端接收能力）
   关闭TCP连接，四次挥手； 1. A要断开了，2. B同意， 3. B可以断开 4. A断开

        客户端：我没什么要说的了，我们分手吧。（客户端没有数据发送了）
        服务器：好的，我们分手吧。（服务器同意分手）
        服务器：我也没什么要说的了，我们分手吧。（服务器没有数据推送了）
        客户端：好的，我们分手吧。（客户端知道服务器没有数据了，果断分手）

31. 输入网址到网页显示，背后发生了什么？
1、浏览器解析URL
2、DNS域名解析
3、浏览器与服务器建立三次握手
4、浏览器向服务器发送HTTP请求报文
5、服务器给浏览器发送HTTP响应报文以及首页的HTML文件
6、浏览器渲染HTML页面
7、浏览器和服务器四次挥手，断开连接

URL解析：浏览器首先会对输入的URL进行解析，包括协议、域名、端口、路径、查询参数等。
DNS解析：浏览器会通过DNS解析将域名解析为IP地址。
组装HTTP请求：浏览器会根据解析后的IP地址，组装HTTP请求
检查缓存：浏览器在发送请求前会检查是否有缓存，有缓存则直接使用缓存，否则发送请求。（html一般不缓存的，这步略过）
建立TCP连接：浏览器会与服务器建立TCP连接，包括三次握手。
发送HTTP请求：浏览器会向服务器发送HTTP请求，包括请求行、请求头、请求体等。
服务器处理请求响应结果：服务器会根据请求的路径和参数，返回相应的资源
断开TCP连接：浏览器与服务器断开TCP连接，包括四次挥手。
解析HTML：浏览器会解析HTML，构建DOM树。
构建CSSOM树：浏览器会解析CSS，构建CSSOM树。
构建渲染树：浏览器会根据DOM树和CSSOM树，构建渲染树。
布局渲染树：浏览器会根据渲染树，计算每个节点的位置和大小。
绘制渲染树：浏览器会根据渲染树，绘制页面。
链接：https://juejin.cn/post/7404777076089208842

32. CSP 通过限制 Web 应用程序能够加载和执行的内容，来减少恶意攻击的成功率 （Content Security Policy）
DOS攻击通常由单个计算机或机器人网络发起，而DDOS攻击则是由多个不同来源的计算机或机器人网络同时攻击，更加难以防御和发现。
    流量过滤、负载均衡、加强认证和授权、升级硬件和软件

 utf8 是对 Unicode 的一种压缩算法
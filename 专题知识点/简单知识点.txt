简单知识点：
1. 
    position:relative 相对定位，相对自身定位
    position:absolute 绝对定位，相对于最近的不为static的父级元素定位

2. 前端内存泄漏：未清空的定时器、闭包、引用未被清除

3.  typeof 引用类型不行，   typeof XXX
    instanceof 基本数据类型不行  XXX instanceof Object

4. 改变原数组：pop, push, shift, unshift, sort, reverse, splice

5. IE盒子，少了边框和padding的宽度
6. 基础类型在栈中，引用类型在堆中
7.  伪类：特定的状态 :hover,:active ；   
    伪元素：特定部分，双冒号 ::before
8. 密钥必须安全存储和传输，避免泄露

9. numStr.replace(/^0{1,}/, '0'); // "000123" → "0123"
   numStr.replace(/^0+/, '') 是通过 ​正则表达式移除字符串开头连续的零
   0+：匹配一个或多个连续的零

10 、
    forEach 不能使用 continue 和 break ，
        可以使用 return 或 return false 跳出循环，
    效果与 for 中 continue 一样，但是该方法无法一次结束所有循环

    every()：every() 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。
    some()：some() 方法测试数组中是不是至少有 1 个元素通过了被提供的函数测试。它返回的是一个布尔值。
    find()：find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。
    findIndex()：findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回-1。

11、
    js 整数最多位数 15

    最大的整数就是2的32次方减1
    即 2 ** 32 - 1
    书上在介绍数组索引时也能佐证,因为数组的索引是整数,最大的索引就是 2 ** 32 - 1 即4294967295

12、字符串下标去除 str.slice(0, index) + str.slice(index + 1)

13、 bom: window , screen , navigator, location, history

14、
__dirname 是相对于当前模块的目录，而 process.cwd() 是整个应用程序的当前工作目录

15、
    splice() 方法用于添加或删除数组中的元素。

    var fruits = ["Banana", "Orange", "Apple", "Mango"];
    fruits.splice(2,0,"Lemon","Kiwi");


    fruits 输出结果：

    Banana,Orange,Lemon,Kiwi,Apple,Mango

16， 字符串和数字， + 偏好 字符串， > 偏好 数字

17、实例上的__proto__ == 构造函数上的prototype

18、
    let numsSet = new Set(nums);
    let numsArray = Array.from(numsSet); // 将 Set 转换为数组

    获取set的第一个元素
    // only get the first item ✅
    const [first] = set;

    // iterator ✅
    const first = set.keys().next().value;

19、 WeakMap 和 WeakSet 通过弱引用避免内存泄漏
20、node中函数带有Sync 一般是同步函数
21、 生成器yield: 
      1. 重启生成器的执行：next(), send(参数), throw()
      2. 可迭代的迭代器，所以可以用for in
22、 数组推导：[ expression for (variable in object) if (condition)] 
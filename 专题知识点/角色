RBAC（基于角色的访问控制）权限系统的核心是角色-权限-用户的三层授权模型。
具体理解可分为：1）权限（Permission）对应具体操作如接口访问/按钮控制，2）角色（Role）聚合相关权限形成业务维度，
3）用户（User）通过关联角色继承权限。在您的项目中，
建议结合models/role.go定义角色模型，通过middleware/jwt实现接口权限校验，
routers/api管理路由权限，形成完整的权限管理体系。

定义角色模型
中间层接口权限校验
路由权限管理


完整权限管理体系
基于角色的访问控制(RBAC)模型，它通过角色作为用户和权限之间的桥梁

接口抽象：设计了清晰的接口层，包括RBAC接口、UserManager、RoleManager和PermissionManager等核心接口，确保实现可替换。
分层设计：采用分层架构，从上至下分为      API层、业务层、数据访问层和存储层，每层职责明确，耦合度低。
适配器模式：使用适配器模式连接现有系统与RBAC核心，允许不同项目无侵入式集成



！！！！！！
角色权限管理如何实现：基于角色的访问控制(RBAC)模型，它通过角色作为用户和权限之间的桥梁
1. 角色页面权限频繁修改，菜单路由权限和api权限管理，相关数据存储在数据库中，通过中间件实现权限校验
2. 菜单数据通过模版数据传递给前端，前端不需要再进行数据请求，减少网络请求 
3. 分层设计，API层、业务层、数据访问层，每层职责明确
4. 核心功能接口进行抽象，实现其他项目复用，只需要修改角色模型
5. 

面试中回答上述，还能怎么优化